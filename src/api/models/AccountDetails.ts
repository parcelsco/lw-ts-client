/* tslint:disable */
/* eslint-disable */
/**
 * Lemonway DirectKit API 2.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
} from './Address';
import type { Birth } from './Birth';
import {
    BirthFromJSON,
    BirthFromJSONTyped,
    BirthToJSON,
} from './Birth';
import type { Company } from './Company';
import {
    CompanyFromJSON,
    CompanyFromJSONTyped,
    CompanyToJSON,
} from './Company';

/**
 * 
 * @export
 * @interface AccountDetails
 */
export interface AccountDetails {
    /**
     * Payment Account ID
     * @type {string}
     * @memberof AccountDetails
     */
    id?: string;
    /**
     * Internal ID given by Lemonway (ID displayed on the Backoffice/Dashboard)
     * @type {number}
     * @memberof AccountDetails
     */
    internalId?: number;
    /**
     * Client Title
     * @type {string}
     * @memberof AccountDetails
     */
    clientTitle?: string;
    /**
     * Holder's First Name
     * @type {string}
     * @memberof AccountDetails
     */
    firstname?: string;
    /**
     * Holder's Last Name
     * @type {string}
     * @memberof AccountDetails
     */
    lastname?: string;
    /**
     * Payment Account Balance Amount
     * @type {number}
     * @memberof AccountDetails
     */
    balance?: number;
    /**
     * Email
     * @type {string}
     * @memberof AccountDetails
     */
    email?: string;
    /**
     * | Status Code                                                     | Payment Account Status                                         |
     * |-----------------------------------------------------------------|----------------------------------------------------------------|
     * | -1                                                              | Wallet SC                                                      |
     * | 2                                                               | Registered, not verified: missing document(s)                  |
     * | 3                                                               | Registered, not verified: document(s) rejected                 |
     * | 5                                                               | Registered, not verified: KYC 1 (status given at registration) |
     * | 6                                                               | Registered and verified: KYC 2                                 |
     * | 7*                                                              | Registered and verified by previous PSP: KYC 3                 |
     * | 8                                                               | Registered, not verified: expired document(s)                  |
     * | 10                                                              | Blocked                                                        |
     * | 12                                                              | Closed                                                         |
     * | 13*                                                             | Registered, status is being updated from KYC 2 to KYC 3        |
     * | 14*                                                             | One-time customer                                              |
     * | 15*                                                             | Special wallet for crowdlending                                |
     * | 16*                                                             | Technical wallet                                               |
     * | *these status may or may not be used depending on your business |                                                                |
     * @type {number}
     * @memberof AccountDetails
     */
    status?: number;
    /**
     * Indicates if wallet is blocked or not:
     * 0: Not blocked
     * 1: Blocked
     * @type {boolean}
     * @memberof AccountDetails
     */
    isblocked?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AccountDetails
     */
    accountType?: number;
    /**
     * 
     * @type {Company}
     * @memberof AccountDetails
     */
    company?: Company;
    /**
     * 
     * @type {Address}
     * @memberof AccountDetails
     */
    adresse?: Address;
    /**
     * 
     * @type {Birth}
     * @memberof AccountDetails
     */
    birth?: Birth;
    /**
     * Nationality
     * @type {string}
     * @memberof AccountDetails
     */
    nationality?: string;
    /**
     * Phone number with MSISDN format
     * @type {string}
     * @memberof AccountDetails
     */
    phoneNumber?: string;
    /**
     * Mobile phone number with MSISDN format
     * @type {string}
     * @memberof AccountDetails
     */
    mobileNumber?: string;
    /**
     * For crowdfunding/loan platforms, indicates if the wallet is created for a debtor 
     * 0 or empty: no
     * 1: yes
     * @type {boolean}
     * @memberof AccountDetails
     */
    isDebtor?: boolean;
    /**
     * Indicates if the payment account is created for a payer or a beneficiary:
     * 1. Empty: unknown status (default)
     * 2. 1: Payer
     * 3. 2: Beneficiary
     * @type {number}
     * @memberof AccountDetails
     */
    payerOrBeneficiary?: number;
}

/**
 * Check if a given object implements the AccountDetails interface.
 */
export function instanceOfAccountDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AccountDetailsFromJSON(json: any): AccountDetails {
    return AccountDetailsFromJSONTyped(json, false);
}

export function AccountDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'internalId': !exists(json, 'internalId') ? undefined : json['internalId'],
        'clientTitle': !exists(json, 'clientTitle') ? undefined : json['clientTitle'],
        'firstname': !exists(json, 'firstname') ? undefined : json['firstname'],
        'lastname': !exists(json, 'lastname') ? undefined : json['lastname'],
        'balance': !exists(json, 'balance') ? undefined : json['balance'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'isblocked': !exists(json, 'isblocked') ? undefined : json['isblocked'],
        'accountType': !exists(json, 'accountType') ? undefined : json['accountType'],
        'company': !exists(json, 'company') ? undefined : CompanyFromJSON(json['company']),
        'adresse': !exists(json, 'adresse') ? undefined : AddressFromJSON(json['adresse']),
        'birth': !exists(json, 'birth') ? undefined : BirthFromJSON(json['birth']),
        'nationality': !exists(json, 'nationality') ? undefined : json['nationality'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'mobileNumber': !exists(json, 'mobileNumber') ? undefined : json['mobileNumber'],
        'isDebtor': !exists(json, 'isDebtor') ? undefined : json['isDebtor'],
        'payerOrBeneficiary': !exists(json, 'payerOrBeneficiary') ? undefined : json['payerOrBeneficiary'],
    };
}

export function AccountDetailsToJSON(value?: AccountDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'internalId': value.internalId,
        'clientTitle': value.clientTitle,
        'firstname': value.firstname,
        'lastname': value.lastname,
        'balance': value.balance,
        'email': value.email,
        'status': value.status,
        'isblocked': value.isblocked,
        'accountType': value.accountType,
        'company': CompanyToJSON(value.company),
        'adresse': AddressToJSON(value.adresse),
        'birth': BirthToJSON(value.birth),
        'nationality': value.nationality,
        'phoneNumber': value.phoneNumber,
        'mobileNumber': value.mobileNumber,
        'isDebtor': value.isDebtor,
        'payerOrBeneficiary': value.payerOrBeneficiary,
    };
}

