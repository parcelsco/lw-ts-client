/* tslint:disable */
/* eslint-disable */
/**
 * Lemonway DirectKit API 2.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PaymentFormDetails
 */
export interface PaymentFormDetails {
    /**
     * 
     * @type {string}
     * @memberof PaymentFormDetails
     */
    parentId?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentFormDetails
     */
    parentComment?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentFormDetails
     */
    amountTot?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentFormDetails
     */
    status?: string;
    /**
     * UTC Unix Timestamp
     * @type {number}
     * @memberof PaymentFormDetails
     */
    utcDate?: number;
    /**
     * UTC Unix Timestamp
     * @type {number}
     * @memberof PaymentFormDetails
     */
    created?: number;
    /**
     * Payment Form ID
     * @type {string}
     * @memberof PaymentFormDetails
     */
    id?: string;
    /**
     * Optional identity of the payment form. You should not use special character here.
     * @type {string}
     * @memberof PaymentFormDetails
     */
    optId?: string;
    /**
     * Payer Account
     * If this field is filled then the money reaches this wallet before arriving at the beneficiary wallet (via a transfer wallet to wallet)
     * note: Don't put the <b>SC Wallet</b> here, it won't work. You cannot credit the <b>SC Wallet</b> with a credit card.
     * @type {string}
     * @memberof PaymentFormDetails
     */
    accountPayer?: string;
    /**
     * Beneficiary Account
     * if this field is not filled then the end-user must to fill its value on the payment form. We recommend you to always fill it instead of your end-user.
     * note: Don't put the <b>SC Wallet</b> here, it won't work. You cannot credit the <b>SC Wallet</b> with a credit card.
     * @type {string}
     * @memberof PaymentFormDetails
     */
    accountReceiver?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentFormDetails
     */
    comment?: string;
    /**
     * URL redirection after the payment procedure is successfully finished
     * @type {string}
     * @memberof PaymentFormDetails
     */
    returnUrl?: string;
    /**
     * URL redirection after the payment procedure is cancelled
     * @type {string}
     * @memberof PaymentFormDetails
     */
    cancelUrl?: string;
    /**
     * URL redirection after the payment procedure is failed
     * @type {string}
     * @memberof PaymentFormDetails
     */
    errorUrl?: string;
    /**
     * Payer's First Name
     * If this field is not filled then the end-user have to fill it in the payment form.
     * @type {string}
     * @memberof PaymentFormDetails
     */
    firstNamePayer?: string;
    /**
     * Payer's Last Name
     * If this field is not filled then the end-user have to fill it in the payment form.
     * @type {string}
     * @memberof PaymentFormDetails
     */
    lastNamePayer?: string;
    /**
     * Payer's Email
     * If this field is not filled then the end-user have to fill it in the payment form.
     * @type {string}
     * @memberof PaymentFormDetails
     */
    emailPayer?: string;
}

/**
 * Check if a given object implements the PaymentFormDetails interface.
 */
export function instanceOfPaymentFormDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaymentFormDetailsFromJSON(json: any): PaymentFormDetails {
    return PaymentFormDetailsFromJSONTyped(json, false);
}

export function PaymentFormDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentFormDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parentId': !exists(json, 'parentId') ? undefined : json['parentId'],
        'parentComment': !exists(json, 'parentComment') ? undefined : json['parentComment'],
        'amountTot': !exists(json, 'amountTot') ? undefined : json['amountTot'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'utcDate': !exists(json, 'utcDate') ? undefined : json['utcDate'],
        'created': !exists(json, 'created') ? undefined : json['created'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'optId': !exists(json, 'optId') ? undefined : json['optId'],
        'accountPayer': !exists(json, 'accountPayer') ? undefined : json['accountPayer'],
        'accountReceiver': !exists(json, 'accountReceiver') ? undefined : json['accountReceiver'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'returnUrl': !exists(json, 'returnUrl') ? undefined : json['returnUrl'],
        'cancelUrl': !exists(json, 'cancelUrl') ? undefined : json['cancelUrl'],
        'errorUrl': !exists(json, 'errorUrl') ? undefined : json['errorUrl'],
        'firstNamePayer': !exists(json, 'firstNamePayer') ? undefined : json['firstNamePayer'],
        'lastNamePayer': !exists(json, 'lastNamePayer') ? undefined : json['lastNamePayer'],
        'emailPayer': !exists(json, 'emailPayer') ? undefined : json['emailPayer'],
    };
}

export function PaymentFormDetailsToJSON(value?: PaymentFormDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parentId': value.parentId,
        'parentComment': value.parentComment,
        'amountTot': value.amountTot,
        'status': value.status,
        'utcDate': value.utcDate,
        'created': value.created,
        'id': value.id,
        'optId': value.optId,
        'accountPayer': value.accountPayer,
        'accountReceiver': value.accountReceiver,
        'comment': value.comment,
        'returnUrl': value.returnUrl,
        'cancelUrl': value.cancelUrl,
        'errorUrl': value.errorUrl,
        'firstNamePayer': value.firstNamePayer,
        'lastNamePayer': value.lastNamePayer,
        'emailPayer': value.emailPayer,
    };
}

