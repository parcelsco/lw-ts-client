/* tslint:disable */
/* eslint-disable */
/**
 * Lemonway DirectKit API 2.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateIBANInput
 */
export interface CreateIBANInput {
    /**
     * Payment Account ID.
     * @type {string}
     * @memberof CreateIBANInput
     */
    wallet: string;
    /**
     * ISO2 code of the country from which the IBAN must be generated
     * We currently serve 5 countries:
     * <ul><li>BE: Belgium (BNP Fortis)</li><li>DE: Germany (BNP Paribas Niederlassung)</li><li>ES: BNP Paribas Sucursal en Espa√±a</li><li>FR: France (BNP Paribas)</li><li>IT: Italy (BNL)</li></ul>
     * @type {string}
     * @memberof CreateIBANInput
     */
    country: string;
    /**
     * If activated, this function will return a PDF document describing the virtual IBAN, along with a <a href="https://www.europeanpaymentscouncil.eu/document-library/guidance-documents/quick-response-code-guidelines-enable-data-capture-initiation" target="_blank">standard EPC QR-Code</a> image. Please store these documents in your datawarehouse, as they are not accessible through Lemonway's API after the virtual IBAN has been generated.
     * @type {boolean}
     * @memberof CreateIBANInput
     */
    generatePDFAndQrCode?: boolean;
    /**
     * ISO 639-1 language code for the PDF document. The supported languages are:
     * <ul><li>en: English</li><li>es: Spanish</li><li>fr: French</li><li>de: German</li><li>it: Italian</li></ul>
     * This field is ignored if generatePDFAndQrCode is false.
     * @type {string}
     * @memberof CreateIBANInput
     */
    pdfLanguage?: string;
}

/**
 * Check if a given object implements the CreateIBANInput interface.
 */
export function instanceOfCreateIBANInput(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "wallet" in value;
    isInstance = isInstance && "country" in value;

    return isInstance;
}

export function CreateIBANInputFromJSON(json: any): CreateIBANInput {
    return CreateIBANInputFromJSONTyped(json, false);
}

export function CreateIBANInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateIBANInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'wallet': json['wallet'],
        'country': json['country'],
        'generatePDFAndQrCode': !exists(json, 'generatePDFAndQrCode') ? undefined : json['generatePDFAndQrCode'],
        'pdfLanguage': !exists(json, 'pdfLanguage') ? undefined : json['pdfLanguage'],
    };
}

export function CreateIBANInputToJSON(value?: CreateIBANInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'wallet': value.wallet,
        'country': value.country,
        'generatePDFAndQrCode': value.generatePDFAndQrCode,
        'pdfLanguage': value.pdfLanguage,
    };
}

