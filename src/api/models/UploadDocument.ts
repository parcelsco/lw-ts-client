/* tslint:disable */
/* eslint-disable */
/**
 * Lemonway DirectKit API 2.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UploadDocument
 */
export interface UploadDocument {
    /**
     * Document ID
     * @type {number}
     * @memberof UploadDocument
     */
    id?: number;
    /**
     * Document Status:<br/>0 = Document put on hold, waiting for another document.<br/>1 = Received, need manual validation.<br/>2 = Accepted.<br/>3 = Rejected.<br/>4 = Rejected. Unreadable by human (Cropped, blur, glare…).<br/>5 = Rejected. Expired (Expiration Date is passed).<br/>6 = Rejected. Wrong Type (Document not accepted).<br/>7 = Rejected. Wrong Name (Name not matching user information).<br/>8 = Rejected. Duplicated Document.<br/>
     * @type {number}
     * @memberof UploadDocument
     */
    status?: UploadDocumentStatusEnum;
    /**
     * Document sub status. Only when Status = 1:<br/>1 = Document type not processable automatically.<br/>2 = Unreadable by computer (Cropped, blur, glare…).<br/>3 = Wrong Type.<br/>4 = Wrong Name (Name not matching user information).<br/>5 = File too big (File should not be over 4MB to be processed automatically).<br/>6 = Automatic Controls Failed.<br/>7 = Need 2 sides of the document in one file.<br/>8 = Unknown.<br/>
     * @type {number}
     * @memberof UploadDocument
     */
    substatus?: UploadDocumentSubstatusEnum;
    /**
     * Payment account status<br/>2 = Registered, KYC incomplete.<br/>3 = Registered, rejected KYC.<br/>5 = Registered, KYC 1 (status given at registration).<br/>6 = Registered, KYC 2.<br/>7 = Registered, KYC 3.<br/>8 = Registered, expired KYC.<br/>10 = Blocked.<br/>12 = Closed.<br/>13 = Registered, status is being updated from KYC 2 to KYC 3.<br/>14 = One-time customer.<br/>15 = Special account for crowdlending.<br/>16 = Technical account.<br/>
     * @type {number}
     * @memberof UploadDocument
     */
    accountstatus?: UploadDocumentAccountstatusEnum;
}


/**
 * @export
 */
export const UploadDocumentStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8
} as const;
export type UploadDocumentStatusEnum = typeof UploadDocumentStatusEnum[keyof typeof UploadDocumentStatusEnum];

/**
 * @export
 */
export const UploadDocumentSubstatusEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8
} as const;
export type UploadDocumentSubstatusEnum = typeof UploadDocumentSubstatusEnum[keyof typeof UploadDocumentSubstatusEnum];

/**
 * @export
 */
export const UploadDocumentAccountstatusEnum = {
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_10: 10,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15,
    NUMBER_16: 16
} as const;
export type UploadDocumentAccountstatusEnum = typeof UploadDocumentAccountstatusEnum[keyof typeof UploadDocumentAccountstatusEnum];


/**
 * Check if a given object implements the UploadDocument interface.
 */
export function instanceOfUploadDocument(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UploadDocumentFromJSON(json: any): UploadDocument {
    return UploadDocumentFromJSONTyped(json, false);
}

export function UploadDocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): UploadDocument {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'substatus': !exists(json, 'substatus') ? undefined : json['substatus'],
        'accountstatus': !exists(json, 'accountstatus') ? undefined : json['accountstatus'],
    };
}

export function UploadDocumentToJSON(value?: UploadDocument | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'status': value.status,
        'substatus': value.substatus,
        'accountstatus': value.accountstatus,
    };
}

