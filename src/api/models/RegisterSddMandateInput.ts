/* tslint:disable */
/* eslint-disable */
/**
 * Lemonway DirectKit API 2.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RegisterSddMandateInput
 */
export interface RegisterSddMandateInput {
    /**
     * Payment Account ID
     * @type {string}
     * @memberof RegisterSddMandateInput
     */
    wallet: string;
    /**
     * IBAN Holder
     * @type {string}
     * @memberof RegisterSddMandateInput
     */
    holder: string;
    /**
     * BIC Code (SWIFT)
     * @type {string}
     * @memberof RegisterSddMandateInput
     */
    bic: string;
    /**
     * IBAN
     * @type {string}
     * @memberof RegisterSddMandateInput
     */
    iban: string;
    /**
     * Indicates if the mandate is a SEPA business to business direct debit
     * @type {boolean}
     * @memberof RegisterSddMandateInput
     */
    isB2B?: boolean;
    /**
     * 1. If true, mandate is for recurring payments
     * 2. If false, mandate is for one payment only
     * @type {boolean}
     * @memberof RegisterSddMandateInput
     */
    isRecurring: boolean;
    /**
     * Client Number and Street
     * Mandatory if you plan to electronically sign the mandate
     * @type {string}
     * @memberof RegisterSddMandateInput
     */
    street?: string;
    /**
     * Client Postal Code/ZIP
     * Mandatory if you plan to electronically sign the mandate
     * @type {string}
     * @memberof RegisterSddMandateInput
     */
    postCode?: string;
    /**
     * Client City
     * Mandatory if you plan to electronically sign the mandate
     * @type {string}
     * @memberof RegisterSddMandateInput
     */
    city?: string;
    /**
     * Client Country
     * Mandatory if you plan to electronically sign the mandate.
     * @type {string}
     * @memberof RegisterSddMandateInput
     */
    country?: string;
    /**
     * Language of the automatically generated mandate(for electronic signature).
     * Currently, the available languages are: fr, en, de, es, it.
     * If you need another, please contact us. 
     * "fr" is used by default if no language is requested.
     * @type {string}
     * @memberof RegisterSddMandateInput
     */
    mandateLanguage?: string;
    /**
     * Unique Mandate Reference Number (UMR)
     * @type {string}
     * @memberof RegisterSddMandateInput
     */
    rum?: string;
}

/**
 * Check if a given object implements the RegisterSddMandateInput interface.
 */
export function instanceOfRegisterSddMandateInput(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "wallet" in value;
    isInstance = isInstance && "holder" in value;
    isInstance = isInstance && "bic" in value;
    isInstance = isInstance && "iban" in value;
    isInstance = isInstance && "isRecurring" in value;

    return isInstance;
}

export function RegisterSddMandateInputFromJSON(json: any): RegisterSddMandateInput {
    return RegisterSddMandateInputFromJSONTyped(json, false);
}

export function RegisterSddMandateInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegisterSddMandateInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'wallet': json['wallet'],
        'holder': json['holder'],
        'bic': json['bic'],
        'iban': json['iban'],
        'isB2B': !exists(json, 'isB2B') ? undefined : json['isB2B'],
        'isRecurring': json['isRecurring'],
        'street': !exists(json, 'street') ? undefined : json['street'],
        'postCode': !exists(json, 'postCode') ? undefined : json['postCode'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'mandateLanguage': !exists(json, 'mandateLanguage') ? undefined : json['mandateLanguage'],
        'rum': !exists(json, 'rum') ? undefined : json['rum'],
    };
}

export function RegisterSddMandateInputToJSON(value?: RegisterSddMandateInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'wallet': value.wallet,
        'holder': value.holder,
        'bic': value.bic,
        'iban': value.iban,
        'isB2B': value.isB2B,
        'isRecurring': value.isRecurring,
        'street': value.street,
        'postCode': value.postCode,
        'city': value.city,
        'country': value.country,
        'mandateLanguage': value.mandateLanguage,
        'rum': value.rum,
    };
}

