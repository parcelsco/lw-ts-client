/* tslint:disable */
/* eslint-disable */
/**
 * Lemonway DirectKit API 2.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetChargebacksOutput,
} from '../models';
import {
    GetChargebacksOutputFromJSON,
    GetChargebacksOutputToJSON,
} from '../models';

export interface DisputesDisputesGetRequest {
    updateDate: string;
    authorization: string;
    pSUIPAddress: string;
    page?: number;
    limit?: number;
    pSUAcceptLanguage?: string;
    pSUUserAgent?: string;
}

/**
 * 
 */
export class DisputesApi extends runtime.BaseAPI {

    /**
     * Get list of disputes from a given date
     */
    async disputesDisputesGetRaw(requestParameters: DisputesDisputesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChargebacksOutput>> {
        if (requestParameters.updateDate === null || requestParameters.updateDate === undefined) {
            throw new runtime.RequiredError('updateDate','Required parameter requestParameters.updateDate was null or undefined when calling disputesDisputesGet.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling disputesDisputesGet.');
        }

        if (requestParameters.pSUIPAddress === null || requestParameters.pSUIPAddress === undefined) {
            throw new runtime.RequiredError('pSUIPAddress','Required parameter requestParameters.pSUIPAddress was null or undefined when calling disputesDisputesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateDate !== undefined) {
            queryParameters['updateDate'] = requestParameters.updateDate;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.pSUAcceptLanguage !== undefined && requestParameters.pSUAcceptLanguage !== null) {
            headerParameters['PSU-Accept-Language'] = String(requestParameters.pSUAcceptLanguage);
        }

        if (requestParameters.pSUIPAddress !== undefined && requestParameters.pSUIPAddress !== null) {
            headerParameters['PSU-IP-Address'] = String(requestParameters.pSUIPAddress);
        }

        if (requestParameters.pSUUserAgent !== undefined && requestParameters.pSUUserAgent !== null) {
            headerParameters['PSU-User-Agent'] = String(requestParameters.pSUUserAgent);
        }

        const response = await this.request({
            path: `/v2/disputes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChargebacksOutputFromJSON(jsonValue));
    }

    /**
     * Get list of disputes from a given date
     */
    async disputesDisputesGet(requestParameters: DisputesDisputesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChargebacksOutput> {
        const response = await this.disputesDisputesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
