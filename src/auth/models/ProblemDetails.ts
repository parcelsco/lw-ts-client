/* tslint:disable */
/* eslint-disable */
/**
 * 
 * # Introduction The Rest API is the webservices that allow you to automatically manage the wallets and operations. Many DIRECTKIT functionalities are also available manually using the BACKOFFICE # Authentication This service strictly follow the chapter 4.4.2 &#34;Access Token request&#34; of the RFC 6749 &#34;the Oauth2 2.0 Authorization Framework&#34;. This Api is consume by the client api, a restrict control on IP is applied. <br/> The unique method exposed by this api allow customers to ask for a unique bearer access token. A bearer allow the customer to consume their api Rest without the need of sending their plain text login and password. <br/> This method has these scenario: <ul>     <li>In case the bearer do not exist, the method create a new bearer.</li>     <li>In case the bearer already exist, it return the actual bearer with the remaining time left.</li>     <li>In case the bearer lifetime is over, this method create a new bearer and delete the previous one.</li> </ul>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: object | any;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string;
}

/**
 * Check if a given object implements the ProblemDetails interface.
 */
export function instanceOfProblemDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProblemDetailsFromJSON(json: any): ProblemDetails {
    return ProblemDetailsFromJSONTyped(json, false);
}

export function ProblemDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProblemDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'type': !exists(json, 'type') ? undefined : json['type'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'detail': !exists(json, 'detail') ? undefined : json['detail'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
    };
}

export function ProblemDetailsToJSON(value?: ProblemDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        'type': value.type,
        'title': value.title,
        'status': value.status,
        'detail': value.detail,
        'instance': value.instance,
    };
}

