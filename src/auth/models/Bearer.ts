/* tslint:disable */
/* eslint-disable */
/**
 * 
 * # Introduction The Rest API is the webservices that allow you to automatically manage the wallets and operations. Many DIRECTKIT functionalities are also available manually using the BACKOFFICE # Authentication This service strictly follow the chapter 4.4.2 &#34;Access Token request&#34; of the RFC 6749 &#34;the Oauth2 2.0 Authorization Framework&#34;. This Api is consume by the client api, a restrict control on IP is applied. <br/> The unique method exposed by this api allow customers to ask for a unique bearer access token. A bearer allow the customer to consume their api Rest without the need of sending their plain text login and password. <br/> This method has these scenario: <ul>     <li>In case the bearer do not exist, the method create a new bearer.</li>     <li>In case the bearer already exist, it return the actual bearer with the remaining time left.</li>     <li>In case the bearer lifetime is over, this method create a new bearer and delete the previous one.</li> </ul>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Bearer
 */
export interface Bearer {
    /**
     * 
     * @type {string}
     * @memberof Bearer
     */
    tokenType: string;
    /**
     * 
     * @type {string}
     * @memberof Bearer
     */
    readonly accessToken: string;
    /**
     * 
     * @type {number}
     * @memberof Bearer
     */
    readonly expiresIn?: number;
}

/**
 * Check if a given object implements the Bearer interface.
 */
export function instanceOfBearer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "tokenType" in value;
    isInstance = isInstance && "accessToken" in value;

    return isInstance;
}

export function BearerFromJSON(json: any): Bearer {
    return BearerFromJSONTyped(json, false);
}

export function BearerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Bearer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tokenType': json['token_Type'],
        'accessToken': json['access_token'],
        'expiresIn': !exists(json, 'expires_in') ? undefined : json['expires_in'],
    };
}

export function BearerToJSON(value?: Bearer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'token_Type': value.tokenType,
    };
}

